1.安装pillow(PIL)库
    sudo pip install pillow
2.原理：
    使用灰度值公式将像素的 RGB 值映射到灰度值（这个公式并不是一个真实的算法，而是简化的 sRGB IEC61966-2.1 公式，真实的公式更复杂一些，不过在我们的这个应用场景下并没有必要）：
    gray ＝ 0.2126 * r + 0.7152 * g + 0.0722 * b
3.步骤：
    1.导包： from PIL import Image
          import argparse
    2.使用 argparse 处理命令行参数，目标是获取输入的图片路径、输出字符画的宽和高以及输出文件的路径：
        # 首先，构建命令行输入参数处理 ArgumentParser 实例
        parser = argparse.ArgumentParser()

        # 定义输入文件、输出文件、输出字符画的宽和高
        parser.add_argument('file')     #输入文件
        parser.add_argument('-o', '--output')   #输出文件
        parser.add_argument('--width', type = int, default = 80) #输出字符画宽
        parser.add_argument('--height', type = int, default = 80) #输出字符画高

        # 解析并获取参数
        args = parser.parse_args()

        # 输入的图片文件路径
        IMG = args.file

        # 输出字符画的宽度
        WIDTH = args.width

        # 输出字符画的高度
        HEIGHT = args.height

        # 输出字符画的路径
        OUTPUT = args.output

    3.首先将 RGB 值转为灰度值，然后使用灰度值映射到字符列表中的某个字符。

        # 使用到的字符集
        ascii_char = list("$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,\"^`'. ")

        #  RGB 值转字符的函数，当 alpha 值为 0 的时候表示图片中该位置为空白
        def get_char(r,g,b,alpha = 256):

            # 判断 alpha 值
            if alpha == 0:
                return ' '

            # 获取字符集的长度，这里为 70
            length = len(ascii_char)

            # 将 RGB 值转为灰度值 gray，灰度值范围为 0-255
            gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)

            # 灰度值范围为 0-255，而字符集只有 70
            # 需要进行如下处理才能将灰度值映射到指定的字符上
            unit = (256.0 + 1)/length

            # 返回灰度值对应的字符
            return ascii_char[int(gray/unit)]

    4.图片处理， 这一步骤放到 if __name__ == "__main__":中（表示如果 ascii.py 被当作 python 模块 import 的时候，这部分代码不会被执行）
        1.首先使用 PIL 的 Image.open 打开图片文件，获得对象 im
        2.使用 PIL 库的 im.resize() 调整图片大小对应到输出的字符画的宽度和高度，  这个函数第二个参数使用 Image.NEAREST，表示输出低质量的图片。
        3.遍历提取图片中每行的像素的 RGB 值，调用 getchar 转成对应的字符
        4.将所有的像素对应的字符拼接在一起成为一个字符串 txt
        5.打印输出字符串 txt
        6.如果执行时配置了输出文件，将打开文件将 txt 输出到文件，如果没有，则默认输出到 output.txt 文件

        “”“
        这个过程中需要注意的是调用 getchar 时候的参数是通过 PIL 库的 getpixel 获取的：
        char = get_char(*im.getpixel((j,i)))
        其中 im.getpixel((j,i)) 获取得到坐标 (j,i) 位置的 RGB 像素值（有的时候会包含 alpha 值），返回的结果是一个元组，例如 (1,2,3) 或者 (1,2,3,0)。我们使用 * 可以将元组作为参数传递给 get_char，同时元组中的每个元素都对应到 get_char 函数的每个参数。
        ”“”

        if __name__ == '__main__':

            # 打开并调整图片的宽和高
            im = Image.open(IMG)
            im = im.resize((WIDTH,HEIGHT), Image.NEAREST)

            # 初始化输出的字符串
            txt = ""

            # 遍历图片中的每一行
            for i in range(HEIGHT):
                # 遍历该行中的每一列
                for j in range(WIDTH):
                    # 将 (j,i) 坐标的 RGB 像素转为字符后添加到 txt 字符串
                    txt += get_char(*im.getpixel((j,i)))
                # 遍历完一行后需要增加换行符
                txt += '\n'
            # 输出到屏幕
            print(txt)

            # 字符画输出到文件
            if OUTPUT:
                with open(OUTPUT,'w') as f:
                    f.write(txt)
            else:
                with open("output.txt",'w') as f:
                    f.write(txt)
